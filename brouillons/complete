// index.ts
import { parseXLSX } from './parser';
import { importToDB } from './importer';
import { config } from 'dotenv';
import path from 'path';
import { connectDB, disconnectDB } from './db';

config();

const filePath = process.argv[2];
if (!filePath) {
  console.error('Usage: node dist/index.js <path_to_xlsx>');
  process.exit(1);
}

const fullPath = path.resolve(filePath);

(async () => {
  try {
    console.log('Connecting to database...');
    await connectDB();

    console.log('Parsing XLSX file...');
    const data = await parseXLSX(fullPath);

    console.log('Inserting data into database...');
    await importToDB(data);

    console.log('Importation r√©ussie !');
  } catch (error) {
    console.error('Erreur:', error);
  } finally {
    await disconnectDB();
  }
})();

// parser.ts
import xlsx from 'xlsx';

export function parseXLSX(filePath: string) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];

  const data = xlsx.utils.sheet_to_json(sheet);
  return data;
}

// importer.ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function importToDB(data: any[]) {
  for (const record of data) {
    await prisma.person.create({ data: record });
  }
}

// db.ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function connectDB() {
  await prisma.$connect();
}

export async function disconnectDB() {
  await prisma.$disconnect();
}

// Dockerfile
FROM node:18
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install
COPY . .
RUN npm run build
CMD ["node", "dist/index.js"]

// docker-compose.yml
version: '3.8'
services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"

// .env
DATABASE_URL=postgresql://user:password@db:5432/mydb

// run.sh
#!/bin/bash
if [ -z "$1" ]; then
  echo "Usage: ./run.sh <path_to_xlsx>"
  exit 1
fi

docker-compose up -d
docker build -t xlsx-importer .
docker run --rm --network=host -v $(pwd):/app xlsx-importer "\$1"
